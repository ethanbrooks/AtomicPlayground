Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

// This script is the main entry point of the game

var _blueprintLib = require('blueprintLib');

var blueprintLib = _interopRequireWildcard(_blueprintLib);

// create a 2D scene

// Set up a globals ojbect that we can reference since
// I'm not entirely sure how the module system works
Globals = {};var scene = new Atomic.Scene();
scene.createComponent("Octree");

var cameraNode = scene.createChild("Camera");
cameraNode.position = [0.0, 0.0, -10.0];

var camera = cameraNode.createComponent("Camera");
camera.orthographic = true;
camera.orthoSize = Atomic.graphics.height * Atomic.PIXEL_SIZE;

var viewport = null;

viewport = new Atomic.Viewport(scene, camera);
Atomic.renderer.setViewport(0, viewport);

Atomic.renderer.textureFilterMode = Atomic.FILTER_NEAREST;

// create the game component
var comp = blueprintLib.createChild(scene, 'spaceGame');

// called per frame

function update(timeStep) {}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs0QkFNOEIsY0FBYzs7SUFBaEMsWUFBWTs7Ozs7O0FBSHhCLE9BQU8sR0FBRyxFQUFFLENBQUMsQUFNYixJQUFJLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQixLQUFLLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUVoQyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXhDLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEQsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7QUFDM0IsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDOztBQUU5RCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7O0FBRXBCLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQzs7QUFFekMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDOzs7QUFHMUQsSUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7Ozs7QUFHakQsU0FBUyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gU2V0IHVwIGEgZ2xvYmFscyBvamJlY3QgdGhhdCB3ZSBjYW4gcmVmZXJlbmNlIHNpbmNlXG4vLyBJJ20gbm90IGVudGlyZWx5IHN1cmUgaG93IHRoZSBtb2R1bGUgc3lzdGVtIHdvcmtzXG5HbG9iYWxzID0ge307XG4vLyBUaGlzIHNjcmlwdCBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBvZiB0aGUgZ2FtZVxuXG5pbXBvcnQgKiBhcyBibHVlcHJpbnRMaWIgZnJvbSAnYmx1ZXByaW50TGliJztcblxuLy8gY3JlYXRlIGEgMkQgc2NlbmVcbnZhciBzY2VuZSA9IG5ldyBBdG9taWMuU2NlbmUoKTtcbnNjZW5lLmNyZWF0ZUNvbXBvbmVudChcIk9jdHJlZVwiKTtcblxudmFyIGNhbWVyYU5vZGUgPSBzY2VuZS5jcmVhdGVDaGlsZChcIkNhbWVyYVwiKTtcbmNhbWVyYU5vZGUucG9zaXRpb24gPSBbMC4wLCAwLjAsIC0xMC4wXTtcblxudmFyIGNhbWVyYSA9IGNhbWVyYU5vZGUuY3JlYXRlQ29tcG9uZW50KFwiQ2FtZXJhXCIpO1xuY2FtZXJhLm9ydGhvZ3JhcGhpYyA9IHRydWU7XG5jYW1lcmEub3J0aG9TaXplID0gQXRvbWljLmdyYXBoaWNzLmhlaWdodCAqIEF0b21pYy5QSVhFTF9TSVpFO1xuXG52YXIgdmlld3BvcnQgPSBudWxsO1xuXG52aWV3cG9ydCA9IG5ldyBBdG9taWMuVmlld3BvcnQoc2NlbmUsIGNhbWVyYSk7XG5BdG9taWMucmVuZGVyZXIuc2V0Vmlld3BvcnQoMCwgdmlld3BvcnQpO1xuXG5BdG9taWMucmVuZGVyZXIudGV4dHVyZUZpbHRlck1vZGUgPSBBdG9taWMuRklMVEVSX05FQVJFU1Q7XG5cbi8vIGNyZWF0ZSB0aGUgZ2FtZSBjb21wb25lbnRcbnZhciBjb21wID0gYmx1ZXByaW50TGliLmNyZWF0ZUNoaWxkKHNjZW5lLCAnc3BhY2VHYW1lJyk7XG5cbi8vIGNhbGxlZCBwZXIgZnJhbWVcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUodGltZVN0ZXApIHt9XG4iXX0=